/*
 * Copyright (c) 2023, 2023, Oracle and/or its affiliates. All rights reserved.
 * Copyright (c) 2023, 2023, Red Hat Inc. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package com.oracle.objectfile.elf.dwarf;

/**
 * An interface that provides definitions for a variety of constants defined by the DWARF standard,
 * employing the same names and types. The primary reference for these constants is the DWARF
 * Debugging Information Format Version 4 Specification published at dwarfstd.org.
 * <p/>
 *
 * Note that this is not an exhaustive list of all DWARF constants. It merely includes constants
 * that are needed by GraalVM.
 */
public interface DwarfConstants {
    /*
     * Names of the different ELF sections we create in reverse dependency order. The sequence
     * starts with the name of the text section (not defined in the DWARF spec and not created by
     * debug info code).
     */
    String TEXT_SECTION_NAME = ".text";
    String DW_STR_SECTION_NAME = ".debug_str";
    String DW_LINE_SECTION_NAME = ".debug_line";
    String DW_FRAME_SECTION_NAME = ".debug_frame";
    String DW_ABBREV_SECTION_NAME = ".debug_abbrev";
    String DW_INFO_SECTION_NAME = ".debug_info";
    String DW_LOC_SECTION_NAME = ".debug_loc";
    String DW_ARANGES_SECTION_NAME = ".debug_aranges";
    String DW_RANGES_SECTION_NAME = ".debug_ranges";

    /**
     * Currently generated debug info relies on DWARF spec version 4. However, some sections may
     * still need to be generated as version 2.
     */
    short DW_VERSION_2 = 2;
    short DW_VERSION_4 = 4;

    /*
     * All the Dwarf tags needed to type DIEs generated by GraalVM.
     */
    int DW_TAG_array_type = 0x01;
    int DW_TAG_class_type = 0x02;
    int DW_TAG_formal_parameter = 0x05;
    int DW_TAG_member = 0x0d;
    int DW_TAG_pointer_type = 0x0f;
    int DW_TAG_compile_unit = 0x11;
    int DW_TAG_structure_type = 0x13;
    int DW_TAG_typedef = 0x16;
    int DW_TAG_union_type = 0x17;
    int DW_TAG_inheritance = 0x1c;
    int DW_TAG_subrange_type = 0x21;
    int DW_TAG_base_type = 0x24;
    int DW_TAG_constant = 0x27;
    int DW_TAG_subprogram = 0x2e;
    int DW_TAG_variable = 0x34;
    int DW_TAG_namespace = 0x39;
    int DW_TAG_unspecified_type = 0x3b;
    int DW_TAG_inlined_subroutine = 0x1d;

    /*
     * All the Dwarf attributes needed to populate DIEs generated by GraalVM.
     */
    int DW_AT_null = 0x0;
    int DW_AT_location = 0x02;
    int DW_AT_name = 0x3;
    int DW_AT_byte_size = 0x0b;
    int DW_AT_bit_size = 0x0d;
    int DW_AT_stmt_list = 0x10;
    int DW_AT_low_pc = 0x11;
    int DW_AT_hi_pc = 0x12;
    int DW_AT_language = 0x13;
    int DW_AT_comp_dir = 0x1b;
    int DW_AT_containing_type = 0x1d;
    int DW_AT_inline = 0x20;
    int DW_AT_abstract_origin = 0x31;
    int DW_AT_accessibility = 0x32;
    int DW_AT_artificial = 0x34;
    int DW_AT_count = 0x37;
    int DW_AT_data_member_location = 0x38;
    @SuppressWarnings("unused") int DW_AT_decl_column = 0x39;
    int DW_AT_decl_file = 0x3a;
    int DW_AT_decl_line = 0x3b;
    int DW_AT_declaration = 0x3c;
    int DW_AT_encoding = 0x3e;
    int DW_AT_external = 0x3f;
    @SuppressWarnings("unused") int DW_AT_return_addr = 0x2a;
    @SuppressWarnings("unused") int DW_AT_frame_base = 0x40;
    int DW_AT_specification = 0x47;
    int DW_AT_type = 0x49;
    int DW_AT_data_location = 0x50;
    int DW_AT_use_UTF8 = 0x53;
    int DW_AT_ranges = 0x55;
    int DW_AT_call_file = 0x58;
    int DW_AT_call_line = 0x59;
    int DW_AT_object_pointer = 0x64;
    int DW_AT_linkage_name = 0x6e;

    /*
     * All the Dwarf attribute forms needed to type attribute values generated by GraalVM.
     */
    int DW_FORM_null = 0x0;
    int DW_FORM_addr = 0x1;
    int DW_FORM_data2 = 0x05;
    int DW_FORM_data4 = 0x6;
    @SuppressWarnings("unused") int DW_FORM_data8 = 0x7;
    @SuppressWarnings("unused") int DW_FORM_string = 0x8;
    @SuppressWarnings("unused") int DW_FORM_block1 = 0x0a;
    int DW_FORM_ref_addr = 0x10;
    @SuppressWarnings("unused") int DW_FORM_ref1 = 0x11;
    @SuppressWarnings("unused") int DW_FORM_ref2 = 0x12;
    @SuppressWarnings("unused") int DW_FORM_ref4 = 0x13;
    @SuppressWarnings("unused") int DW_FORM_ref8 = 0x14;
    int DW_FORM_sec_offset = 0x17;
    int DW_FORM_data1 = 0x0b;
    int DW_FORM_flag = 0xc;
    int DW_FORM_strp = 0xe;
    int DW_FORM_expr_loc = 0x18;

    /*
     * The following constants correspond to pre-defined value ranges appropriate to a specific
     * attribute or form.
     */

    /*
     * Compile unit DIE header has_children attribute values.
     */
    byte DW_CHILDREN_no = 0;
    byte DW_CHILDREN_yes = 1;

    /*
     * DW_FORM_flag haas two possible attribute values.
     */
    @SuppressWarnings("unused") byte DW_FLAG_false = 0;
    byte DW_FLAG_true = 1;

    /*
     * DW_AT_language attribute with form DATA1 has a range of pre-defined values.
     */
    byte DW_LANG_Java = 0xb;

    /*
     * Values for DW_AT_inline attribute with form DATA1.
     */
    @SuppressWarnings("unused") byte DW_INL_not_inlined = 0;
    byte DW_INL_inlined = 1;
    @SuppressWarnings("unused") byte DW_INL_declared_not_inlined = 2;
    @SuppressWarnings("unused") byte DW_INL_declared_inlined = 3;

    /*
     * DW_AT_Accessibility attribute values.
     */
    @SuppressWarnings("unused") byte DW_ACCESS_public = 1;
    @SuppressWarnings("unused") byte DW_ACCESS_protected = 2;
    @SuppressWarnings("unused") byte DW_ACCESS_private = 3;

    /*
     * DW_AT_encoding attribute values
     */
    @SuppressWarnings("unused") byte DW_ATE_address = 0x1;
    byte DW_ATE_boolean = 0x2;
    byte DW_ATE_float = 0x4;
    byte DW_ATE_signed = 0x5;
    byte DW_ATE_signed_char = 0x6;
    byte DW_ATE_unsigned = 0x7;
    @SuppressWarnings("unused") byte DW_ATE_unsigned_char = 0x8;

    /*
     * Constants that appear in CIE and FDE frame section entries.
     */
    byte DW_CFA_CIE_version = 1;
    /* Values encoded in high 2 bits. */
    byte DW_CFA_advance_loc = 0x1;
    byte DW_CFA_offset = 0x2;
    byte DW_CFA_restore = 0x3;
    /* Values encoded in low 6 bits. */
    byte DW_CFA_nop = 0x0;
    @SuppressWarnings("unused") byte DW_CFA_set_loc1 = 0x1;
    byte DW_CFA_advance_loc1 = 0x2;
    byte DW_CFA_advance_loc2 = 0x3;
    byte DW_CFA_advance_loc4 = 0x4;
    @SuppressWarnings("unused") byte DW_CFA_offset_extended = 0x5;
    @SuppressWarnings("unused") byte DW_CFA_restore_extended = 0x6;
    @SuppressWarnings("unused") byte DW_CFA_undefined = 0x7;
    @SuppressWarnings("unused") byte DW_CFA_same_value = 0x8;
    byte DW_CFA_register = 0x9;
    byte DW_CFA_def_cfa = 0xc;
    @SuppressWarnings("unused") byte DW_CFA_def_cfa_register = 0xd;
    byte DW_CFA_def_cfa_offset = 0xe;

    /*
     * Values used to build DWARF expressions and locations
     */
    byte DW_OP_addr = 0x03;
    @SuppressWarnings("unused") byte DW_OP_deref = 0x06;
    byte DW_OP_dup = 0x12;
    byte DW_OP_and = 0x1a;
    byte DW_OP_not = 0x20;
    byte DW_OP_plus = 0x22;
    byte DW_OP_shl = 0x24;
    byte DW_OP_shr = 0x25;
    byte DW_OP_bra = 0x28;
    byte DW_OP_eq = 0x29;
    byte DW_OP_lit0 = 0x30;
    byte DW_OP_reg0 = 0x50;
    byte DW_OP_breg0 = 0x70;
    byte DW_OP_regx = (byte) 0x90;
    byte DW_OP_bregx = (byte) 0x92;
    byte DW_OP_push_object_address = (byte) 0x97;
    byte DW_OP_implicit_value = (byte) 0x9e;
    byte DW_OP_stack_value = (byte) 0x9f;

    /*
     * Standard line section opcodes defined by Dwarf 2
     */
    /*
     * 0 can be returned to indicate an invalid opcode.
     */
    byte DW_LNS_undefined = 0;
    /*
     * 0 can be inserted as a prefix for extended opcodes.
     */
    byte DW_LNS_extended_prefix = 0;
    /*
     * Append current state as matrix row 0 args.
     */
    byte DW_LNS_copy = 1;
    /*
     * Increment address 1 uleb arg.
     */
    byte DW_LNS_advance_pc = 2;
    /*
     * Increment line 1 sleb arg.
     */
    byte DW_LNS_advance_line = 3;
    /*
     * Set file 1 uleb arg.
     */
    byte DW_LNS_set_file = 4;
    /*
     * sSet column 1 uleb arg.
     */
    byte DW_LNS_set_column = 5;
    /*
     * Flip is_stmt 0 args.
     */
    byte DW_LNS_negate_stmt = 6;
    /*
     * Set end sequence and copy row 0 args.
     */
    byte DW_LNS_set_basic_block = 7;
    /*
     * Increment address as per opcode 255 0 args.
     */
    byte DW_LNS_const_add_pc = 8;
    /*
     * Increment address 1 ushort arg.
     */
    byte DW_LNS_fixed_advance_pc = 9;

    /*
     * Increment address 1 ushort arg.
     */
    @SuppressWarnings("unused") byte DW_LNS_set_prologue_end = 10;

    /*
     * Increment address 1 ushort arg.
     */
    @SuppressWarnings("unused") byte DW_LNS_set_epilogue_begin = 11;

    /*
     * Extended line section opcodes defined by DWARF 2.
     */
    /*
     * There is no extended opcode 0.
     */
    @SuppressWarnings("unused") byte DW_LNE_undefined = 0;
    /*
     * End sequence of addresses.
     */
    byte DW_LNE_end_sequence = 1;
    /*
     * Set address as explicit long argument.
     */
    byte DW_LNE_set_address = 2;
    /*
     * Set file as explicit string argument.
     */
    byte DW_LNE_define_file = 3;
}
